name: unix

on: [push, pull_request]

jobs:
  clangtidy10_nopy_ompi_h5_ad1_ad2:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Spack Cache
      uses: actions/cache@v2
      with: {path: /opt/spack, key: clangtidy10_nopy_ompi_h5_ad1_ad2 }
    - name: Install
      run: |
        sudo apt-get update
        sudo apt-get install clang clang-tidy gfortran libopenmpi-dev python
        sudo .github/workflows/dependencies/install_spack
    - name: Build
      env: {CC: clang, CXX: clang++, CXXFLAGS: -Wno-deprecated-declarations}
      # The main openPMD code base leads to many clang-tidy warnings
      # when C++17 is enabled. We cannot enable it yet.
      run: |
        eval $(spack env activate --sh .github/ci/spack-envs/clangtidy_nopy_ompi_h5_ad1_ad2/)
        spack install

        mkdir build && cd build
        ../share/openPMD/download_samples.sh && chmod u-w samples/git-sample/*.h5
        cmake -S .. -B . -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_CXX_CLANG_TIDY="$(which clang-tidy);-system-headers=0" -DopenPMD_USE_REGIONS=ON -DopenPMD_USE_INVASIVE_TESTS=ON
        cmake --build . --parallel 2 2> clang-tidy.log
        cat clang-tidy.log
        if [[ $(wc -m <clang-tidy.log) -gt 1 ]]; then exit 1; fi

  clangsanitizer10_nopy_ompi_h5_ad1_ad2:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Spack Cache
      uses: actions/cache@v2
      with: {path: /opt/spack, key: clang10_nopy_ompi_h5_ad1_ad2 }
    - name: Install
      run: |
        sudo apt-get update
        sudo apt-get install clang-10 libc++-dev libc++abi-dev python3 gfortran libopenmpi-dev
        python3 -m pip install -U pip
        python3 -m pip install -U numpy
        sudo .github/workflows/dependencies/install_spack
    - name: Build
      env: {CC: mpicc, CXX: mpic++, OMPI_CC: clang-10, OMPI_CXX: clang++-10, CXXFLAGS: -Werror -Wno-deprecated-declarations, OPENPMD_HDF5_CHUNKS: none}
      run: |
        eval $(spack env activate --sh .github/ci/spack-envs/clangtidy_nopy_ompi_h5_ad1_ad2/)
        spack install
        SOURCEPATH="$(pwd)"
        mkdir build && cd build
        ../share/openPMD/download_samples.sh && chmod u-w samples/git-sample/*.h5
        export LDFLAGS="${LDFLAGS} -fsanitize=address,undefined -shared-libsan"
        export CXXFLAGS="${CXXFLAGS} -fsanitize=address,undefined -shared-libsan"
        cmake -S .. -B .                  \
          -DopenPMD_USE_MPI=ON            \
          -DopenPMD_USE_PYTHON=ON         \
          -DopenPMD_USE_HDF5=ON           \
          -DopenPMD_USE_ADIOS2=ON         \
          -DopenPMD_USE_ADIOS1=ON         \
          -DopenPMD_USE_REGIONS=ON        \
          -DopenPMD_USE_INVASIVE_TESTS=ON \
          -DCMAKE_VERBOSE_MAKEFILE=ON
        cmake --build . --parallel 2
        export ASAN_OPTIONS=detect_stack_use_after_return=1:detect_leaks=1:check_initialization_order=true:strict_init_order=true:detect_stack_use_after_scope=1:fast_unwind_on_malloc=0
        export LSAN_OPTIONS=suppressions="$SOURCEPATH/.github/ci/sanitizer/clang/Leak.supp"
        export LD_PRELOAD=/usr/lib/clang/10/lib/linux/libclang_rt.asan-x86_64.so
        ctest --output-on-failure

  clang5_nopy_nompi_h5:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Spack Cache
      uses: actions/cache@v2
      with: {path: /opt/spack, key: clang5_nopy_nompi_h5 }
    - name: Install
      run: |
        sudo apt-get update
        sudo apt-get install clang-5.0
        sudo .github/workflows/dependencies/install_spack
    - name: Build
      env: {CC: clang-5.0, CXX: clang++-5.0, CXXFLAGS: -Werror -Wno-deprecated-declarations}
      # Clang 5 does not handle GCC 10's STL in C++17-mode
      run: |
        eval $(spack env activate --sh .github/ci/spack-envs/clang5_nopy_nompi_h5/)
        spack install

        mkdir build && cd build
        ../share/openPMD/download_samples.sh && chmod u-w samples/git-sample/*.h5
        cmake -S .. -B . -DCMAKE_BUILD_TYPE=RelWithDebInfo -DopenPMD_USE_PYTHON=OFF -DopenPMD_USE_MPI=OFF -DopenPMD_USE_HDF5=ON -DopenPMD_USE_INVASIVE_TESTS=ON
        cmake --build . --parallel 2
        ctest --output-on-failure

  clang5_nopy_ompi_h5_ad1_ad2_bp3:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Spack Cache
      uses: actions/cache@v2
      with: {path: /opt/spack, key: clang5_nopy_ompi_h5_ad1_ad2_bp3 }
    - name: Install
      run: |
        sudo apt-get update
        sudo apt-get install clang-5.0 gfortran libopenmpi-dev python3
        sudo .github/workflows/dependencies/install_spack
    - name: Build
      env: {CC: clang-5.0, CXX: clang++-5.0, CXXFLAGS: -Werror -Wno-deprecated-declarations}
      # Clang 5 does not handle GCC 10's STL in C++17-mode
      run: |
        eval $(spack env activate --sh .github/ci/spack-envs/clang5_nopy_ompi_h5_ad1_ad2_bp3/)
        spack install

        mkdir build && cd build
        ../share/openPMD/download_samples.sh && chmod u-w samples/git-sample/*.h5
        cmake -S .. -B . -DCMAKE_BUILD_TYPE=RelWithDebInfo -DopenPMD_USE_PYTHON=OFF -DopenPMD_USE_MPI=ON -DopenPMD_USE_HDF5=ON -DopenPMD_USE_ADIOS1=ON -DopenPMD_USE_ADIOS2=ON -DopenPMD_USE_INVASIVE_TESTS=ON
        cmake --build . --parallel 2
        ctest --output-on-failure

        find . -name *.bp     | xargs -n1 -P1 -I {} rm -rf {}
        find . -name *.bp.dir | xargs -n1 -P1 -I {} rm -rf {}
        export OPENPMD_BP_BACKEND=ADIOS1
        ctest --output-on-failure

  clang5_nopy_ompi_h5_ad2_newLayout:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Spack Cache
      uses: actions/cache@v2
      with: {path: /opt/spack, key: clang5_nopy_ompi_h5_ad1_ad2_bp3 }
    - name: Install
      run: |
        sudo apt-get update
        sudo apt-get install clang-5.0 gfortran libopenmpi-dev python3
        sudo .github/workflows/dependencies/install_spack
    - name: Build
      # Clang 5 does not handle GCC 10's STL in C++17-mode
      env: {CC: clang-5.0, CXX: clang++-5.0, CXXFLAGS: -Werror -Wno-deprecated-declarations, OPENPMD2_ADIOS2_SCHEMA: 20210209}
      run: |
        eval $(spack env activate --sh .github/ci/spack-envs/clang5_nopy_ompi_h5_ad1_ad2_bp3/)
        spack install

        mkdir build && cd build
        ../share/openPMD/download_samples.sh && chmod u-w samples/git-sample/*.h5
        cmake -S .. -B . -DCMAKE_BUILD_TYPE=RelWithDebInfo -DopenPMD_USE_PYTHON=OFF -DopenPMD_USE_MPI=ON -DopenPMD_USE_HDF5=ON -DopenPMD_USE_ADIOS1=OFF -DopenPMD_USE_ADIOS2=ON -DopenPMD_USE_INVASIVE_TESTS=ON
        cmake --build . --parallel 2
        ctest --output-on-failure

# TODO
#  clang6_py36_nompi_h5_ad1_ad2_libcpp

  clang10_py38_nompi_h5_ad1_ad2_libcpp:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Install
      run: |
        sudo apt-get update
        sudo apt-get install clang-10 libc++-dev libc++abi-dev libhdf5-dev python3
        python3 -m pip install -U pip
        python3 -m pip install -U numpy
#       TODO ADIOS1 ADIOS2
    - name: Build
      env: {CC: clang-10, CXX: clang++-10, CXXFLAGS: -Werror -Wno-deprecated-declarations}
      # TODO
      # , CXXFLAGS: -nostdinc++ -I/usr/include/c++/10 -I/usr/include/x86_64-linux-gnu/c++/10/, LDFLAGS: -stdlib=libc++ -lc++ -lc++abi}
      run: |
        mkdir build && cd build
        ../share/openPMD/download_samples.sh && chmod u-w samples/git-sample/*.h5
        cmake -S .. -B . -DCMAKE_BUILD_TYPE=RelWithDebInfo -DopenPMD_USE_PYTHON=ON -DopenPMD_USE_MPI=OFF -DopenPMD_USE_HDF5=ON -DopenPMD_USE_REGIONS=ON -DopenPMD_USE_INVASIVE_TESTS=ON -DCMAKE_VERBOSE_MAKEFILE=ON
        cmake --build . --parallel 2
        ctest --output-on-failure

  clang8_py38_mpich_h5_ad1_ad2_newLayout:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Spack Cache
      uses: actions/cache@v2
      with: {path: /opt/spack, key: clang8_py38_mpich_h5_ad1_ad2_newLayout }
    - name: Install
      run: |
        sudo apt-get update
        sudo apt-get install clang-8 gfortran libmpich-dev python3
        sudo .github/workflows/dependencies/install_spack
    - name: Build
      env: {CC: clang-8, CXX: clang++-8, CXXFLAGS: -Werror -Wno-deprecated-declarations, OPENPMD2_ADIOS2_SCHEMA: 20210209}
      run: |
        eval $(spack env activate --sh .github/ci/spack-envs/clang8_py38_mpich_h5_ad1_ad2/)
        spack install

        mkdir build && cd build
        ../share/openPMD/download_samples.sh && chmod u-w samples/git-sample/*.h5
        cmake -S .. -B . -DopenPMD_USE_PYTHON=OFF -DopenPMD_USE_MPI=ON -DopenPMD_USE_HDF5=ON -DopenPMD_USE_ADIOS1=ON -DopenPMD_USE_ADIOS2=ON -DopenPMD_USE_REGIONS=ON -DopenPMD_USE_INVASIVE_TESTS=ON
        cmake --build . --parallel 2
        ctest --output-on-failure

# TODO
#  clang10_py38_ompi_h5_1-10-6_ad1_ad2_release
#  ..._h5coll with OPENPMD_HDF5_INDEPENDENT: OFF

#  appleclang9_py37_nompi_h5_ad1
#  appleclang10_py37_h5_ad2_libcpp
#  appleclang11_nopy_nompi_h5_ad2

  appleclang12_py_mpi_h5_ad2:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install
      run: |
        rm -rf /usr/local/bin/2to3
        set +e
        brew update
        brew install adios2 || true
        brew install hdf5-mpi || true
        brew install python || true
        set -e
    - name: Build
      env: {CXXFLAGS: -Werror -Wno-deprecated-declarations, MACOSX_DEPLOYMENT_TARGET: 10.9}
      # C++11 & 14 support in macOS 10.9+
      # C++17 support in macOS 10.13+/10.14+
      #   https://cibuildwheel.readthedocs.io/en/stable/cpp_standards/#macos-and-deployment-target-versions
      run: |
        mkdir build && cd build
        ../share/openPMD/download_samples.sh && chmod u-w samples/git-sample/*.h5
        cmake -S .. -B . -DCMAKE_BUILD_TYPE=RelWithDebInfo -DopenPMD_USE_PYTHON=ON -DopenPMD_USE_MPI=ON -DopenPMD_USE_HDF5=ON -DopenPMD_USE_ADIOS2=ON -DopenPMD_USE_REGIONS=ON -DopenPMD_USE_INVASIVE_TESTS=ON
        cmake --build . --parallel 2
        ctest --output-on-failure

# TODO
#  gcc-4.9.4_nopy_nompi_h5_ad1_ad2
#  gcc-4.9.4_nopy_ompi_h5_ad1_ad2
#  gcc-9.3.0_nopy_nompi_h5_ad1_ad2-2.6.0
#  gcc-7.4.0_nopy_ompi_h5_ad1_h5coll
#  gcc-6.5.0_py35_nompi_h5_ad1-1.13.1
#  gcc-8.1.0_py37_nompi_h5_ad1_static
#  gcc-6.5.0_py36_nompi_h5-1.8.13
#  gcc-4.8.5_py35_nompi_h5
#  gcc-7.4.0_py_ompi_h5_ad1_ad2_coveralls

  gcc5_py36_pd_dd_ompi_h5_ad1_ad2:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Spack Cache
      uses: actions/cache@v2
      with: {path: /opt/spack, key: gcc7_py36_ompi_h5_ad1_ad2 }
    - name: Install
      run: |
        sudo apt-get update
        sudo apt-get install g++-5 gfortran libopenmpi-dev python3 python3-setuptools
        sudo .github/workflows/dependencies/install_spack
        python3 -m pip install -U pip
        python3 -m pip install -U numpy
        python3 -m pip install -U mpi4py
        python3 -m pip install -U pandas
        python3 -m pip install -U dask
        python3 -m pip install -U pyarrow
    - name: Build
      env: {CC: gcc-7, CXX: g++-7, CXXFLAGS: -Werror -Wno-deprecated-declarations}
      run: |
        eval $(spack env activate --sh .github/ci/spack-envs/gcc7_py36_ompi_h5_ad1_ad2/)
        spack install

        mkdir build && cd build
        ../share/openPMD/download_samples.sh && chmod u-w samples/git-sample/*.h5
        cmake -S .. -B . \
          -DCMAKE_BUILD_TYPE=RelWithDebInfo \
          -DopenPMD_USE_PYTHON=ON \
          -DopenPMD_USE_MPI=ON    \
          -DopenPMD_USE_HDF5=ON   \
          -DopenPMD_USE_ADIOS1=ON \
          -DopenPMD_USE_ADIOS2=ON \
          -DopenPMD_USE_INVASIVE_TESTS=ON
        cmake --build . --parallel 2
        ctest --output-on-failure

  gcc9_py38_pd_nompi_h5_ad1_ad2_libcpp:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Install
      run: |
        sudo apt-get update
        sudo apt-get install g++ libopenmpi-dev libhdf5-openmpi-dev libadios-dev python3 python3-numpy python3-mpi4py python3-pandas
#       TODO ADIOS1 (.pc file broken?) ADIOS2
    - name: Build
      env: {CXXFLAGS: -Werror -Wno-deprecated-declarations, PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig}
      run: |
        mkdir build && cd build
        ../share/openPMD/download_samples.sh && chmod u-w samples/git-sample/*.h5
        cmake -S .. -B . -DCMAKE_BUILD_TYPE=RelWithDebInfo -DopenPMD_USE_PYTHON=ON -DopenPMD_USE_MPI=ON -DopenPMD_USE_HDF5=ON -DopenPMD_USE_REGIONS=ON -DopenPMD_USE_INVASIVE_TESTS=ON
        cmake --build . --parallel 2
        ctest --output-on-failure

  conda_ompi_all:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - uses: conda-incubator/setup-miniconda@v2
      name: Setup conda
      with:
        auto-update-conda: true
        activate-environment: testing
        auto-activate-base: false
        channels: conda-forge,defaults
        channel-priority: true
    - name: Install
      shell: bash -eo pipefail -l {0}
      run: |
        conda env create --file conda.yml
    - name: Build
      shell: bash -eo pipefail -l {0}
      env: {CXXFLAGS: -Werror -Wno-deprecated-declarations}
      run: |
        conda activate openpmd-api-dev

        mkdir build && cd build
        ../share/openPMD/download_samples.sh && chmod u-w samples/git-sample/*.h5
        cmake -S .. -B . \
          -DopenPMD_USE_PYTHON=ON \
          -DopenPMD_USE_MPI=ON    \
          -DopenPMD_USE_HDF5=ON   \
          -DopenPMD_USE_ADIOS1=ON \
          -DopenPMD_USE_ADIOS2=ON \
          -DopenPMD_USE_REGIONS=ON \
          -DopenPMD_USE_INVASIVE_TESTS=ON
        cmake --build . --parallel 2
        ctest --output-on-failure

  icc_cxxonly:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Install
      run: |
        sudo .github/workflows/dependencies/install_icc
    - name: Build
      env: {CXXFLAGS: -Werror -Wno-deprecated-declarations}
      # C++17 is advertised, but is not properly supported (false
      # positives for unused arguments and missing return statements
      # with `if constexpr`)
      run: |
        set +e; source /opt/intel/oneapi/setvars.sh; set -e
        mkdir build && cd build
        ../share/openPMD/download_samples.sh && chmod u-w samples/git-sample/*.h5
        cmake -S .. -B . \
          -DCMAKE_BUILD_TYPE=RelWithDebInfo  \
          -DCMAKE_C_COMPILER=$(which icc)    \
          -DCMAKE_CXX_COMPILER=$(which icpc) \
          -DopenPMD_USE_PYTHON=OFF           \
          -DopenPMD_USE_MPI=OFF
        cmake --build . --parallel 2
        ctest --output-on-failure

  icx_cxxonly:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Install
      run: |
        sudo .github/workflows/dependencies/install_icx
    - name: Build
      env: {CXXFLAGS: -Werror -Wno-deprecated-declarations}
      run: |
        set +e; source /opt/intel/oneapi/setvars.sh; set -e
        mkdir build && cd build
        ../share/openPMD/download_samples.sh && chmod u-w samples/git-sample/*.h5
        cmake -S .. -B . \
          -DCMAKE_BUILD_TYPE=RelWithDebInfo  \
          -DCMAKE_C_COMPILER=$(which icx)    \
          -DCMAKE_CXX_COMPILER=$(which icpx) \
          -DopenPMD_USE_PYTHON=OFF           \
          -DopenPMD_USE_MPI=OFF              \
          -DopenPMD_USE_REGIONS=ON           \
          -DCMAKE_C_COMPILER_ID="Clang"                  \
          -DCMAKE_C_COMPILER_VERSION=12.0                \
          -DCMAKE_C_STANDARD_COMPUTED_DEFAULT="11"       \
          -DCMAKE_CXX_COMPILER_ID="Clang"                \
          -DCMAKE_CXX_COMPILER_VERSION=12.0              \
          -DCMAKE_CXX_STANDARD_COMPUTED_DEFAULT="14"
        cmake --build . --parallel 2
        ctest --output-on-failure
