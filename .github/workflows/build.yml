name: wheels

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build ${{ matrix.arch }} wheel on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            arch: "x86_64"

          # 32bit Linux builds blocked by:
          # GNU 7.3.1 & MPark.Variant 1.4.0 on i686:
          #     https://github.com/pypa/manylinux/issues/543
          #       variant.hpp:2241:9: internal compiler error:
          #       unexpected expression ‘I’ of kind template_parm_index
          #       typename T = lib::type_pack_element_t<I, Ts...>,
          #- os: ubuntu-20.04
          #  arch: "i686"

          # builds faster on Travis-CI:
          #- os: ubuntu-20.04
          #  arch: "aarch64"

          # builds faster on Travis-CI:
          #- os: ubuntu-20.04
          #  arch: "ppc64le"

          # builds faster on Travis-CI:
          # blocked by https://github.com/GTkorvo/dill/issues/15
          #- os: ubuntu-20.04
          #  arch: "s390x"

          - os: windows-2019
            arch: "AMD64"
            # x86 (32bit)

          - os: macos-10.15
            arch: "x86_64"
            env:
              MACOSX_DEPLOYMENT_TARGET: 10.9
          # not really needed separately, yet arm64 also creates a wheel for
          # CPython 3.8:
          #   https://cibuildwheel.readthedocs.io/en/stable/faq/#apple-silicon
          #   https://github.com/pypa/cibuildwheel/pull/704
          - os: macos-11
            arch: "arm64"
            env:
              CMAKE_OSX_ARCHITECTURES: "arm64"
              CMAKE_APPLE_SILICON_PROCESSOR: "x86_64"
              MACOSX_DEPLOYMENT_TARGET: 11.0
          # Needs extra treatment of all librarys that are not CMake controlled
          # the dependencies:
          #   https://developer.apple.com/documentation/apple-silicon/building-a-universal-macos-binary
          - os: macos-11
            arch: "universal2"
            env:
              CMAKE_OSX_ARCHITECTURES: "arm64;x86_64"
              CMAKE_APPLE_SILICON_PROCESSOR: "x86_64"
              MACOSX_DEPLOYMENT_TARGET: 11.0

    steps:
    - uses: actions/checkout@v2
      with:
        path: 'src'
        ref: '0.14.4'

    - uses: actions/checkout@v2
      with:
        path: 'src/.github/'

    - uses: actions/setup-python@v1
      name: Install Python
      with:
        python-version: '3.7'

    - name: Install cibuildwheel
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install cibuildwheel==2.2.2

#    - name: Download Patch 1/1
#      uses: suisei-cn/actions-download-file@v1
#      id: setupversion
#      with:
#        url: "https://gist.githubusercontent.com/ax3l/4db2f1744e0e28e6c013ee4e752b3cb7/raw/324bdb60894d51608a48890573654e10e1b1c3a0/setupversion.patch"
#        target: src/.patch/

#    - name: Apply Patch
#      run: |
#        python -m pip install "patch==1.*"
#        cd src
#        python -m patch .patch/setupversion.patch

    - name: Build wheel
      env:
        # (1) CMake/Pybind11 scripts not clever enough to build 32bit Windows with 64bit compiler
        # (2) GNU 7.3.1 & MPark.Variant 1.4.0 on i686:
        #     https://github.com/pypa/manylinux/issues/543
        #       variant.hpp:2241:9: internal compiler error:
        #       unexpected expression ‘I’ of kind template_parm_index
        #       typename T = lib::type_pack_element_t<I, Ts...>,
        # (3) Disable PyPy (manylinux image: yum repo issues)
        #     https://github.com/pypa/manylinux/issues/899
        CIBW_SKIP: "*-win32 *-manylinux_i686 pp*-manylinux*"
        CIBW_ARCHS: "${{ matrix.arch }}"
        CIBW_PROJECT_REQUIRES_PYTHON: ">=3.6"
        # Install dependencies
        CIBW_BEFORE_BUILD_LINUX: bash -x .github/library_builders.sh
        CIBW_BEFORE_BUILD_MACOS: bash -x .github/library_builders.sh
        CIBW_BEFORE_BUILD_WINDOWS: 'cmd /E:ON /V:ON /C .github\library_builders.bat'
        # for the openPMD-api build, CMake shall search for
        # static dependencies of HDF5 and ADIOS1 (see setup.py)
        CIBW_ENVIRONMENT: HDF5_USE_STATIC_LIBRARIES='ON' ADIOS_USE_STATIC_LIBS='ON'
        CIBW_ENVIRONMENT_WINDOWS: HDF5_USE_STATIC_LIBRARIES='ON' CMAKE_PREFIX_PATH='C:/Program Files (x86)/ADIOS2;C:/Program Files (x86)/blosc;C:/Program Files/HDF_Group/HDF5/1.12.0;C:/Program Files (x86)/ZFP;C:/Program Files (x86)/zlib/'
        # C++11 & 14 support in macOS 10.9+
        # C++17 support in macOS 10.13+/10.14+
        #   https://cibuildwheel.readthedocs.io/en/stable/cpp_standards/#macos-and-deployment-target-versions
        # arm64 Python interpreters are built with 11.0
        MACOSX_DEPLOYMENT_TARGET: "${{ matrix.env.MACOSX_DEPLOYMENT_TARGET }}"
        CMAKE_OSX_ARCHITECTURES: "${{ matrix.env.CMAKE_OSX_ARCHITECTURES }}"
        CMAKE_APPLE_SILICON_PROCESSOR: "${{ matrix.env.CMAKE_APPLE_SILICON_PROCESSOR }}"
        # Show a bit more output (pip -v)
        CIBW_BUILD_VERBOSITY: 1
      run: |
        cd src
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install --upgrade cmake
        python setup.py sdist --dist-dir ../wheelhouse
        python -m cibuildwheel --output-dir ../wheelhouse

    - name: Publish on pypi.org
      if: github.event_name == 'push' && github.repository == 'openPMD/openPMD-api' && github.ref == 'refs/heads/wheels'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.pypa_gh_action_upload }}
      run: |
        python -m pip install -U twine
        python -m twine upload --skip-existing wheelhouse/*

    - uses: actions/upload-artifact@v1
      name: Publish as GitHub artifact
      with:
        name: wheels
        path: ./wheelhouse
